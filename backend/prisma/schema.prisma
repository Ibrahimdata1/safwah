// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model Threads{
  id String @id @default(uuid())
  topic String
  content String
  createdAt DateTime @default(now())
  user Users @relation(fields:[userId],references:[id],onDelete:Cascade)
  userId String
  comments Comments[]
}
model Comments{
  id String @id @default(uuid())
  comment String
  createdAt DateTime @default(now())
  post Post @relation(fields:[postId],references:[id],onDelete:Cascade)
  postId String
  user Users @relation(fields:[userId],references:[id],onDelete:Cascade)
  userId String
  thread Threads? @relation(fields:[threadId],references:[id],onDelete:Cascade)
  threadId String?
}
model Users {
  id String @id
  name String
  surname String
  username String
  email String @unique
  password String
  createdAt DateTime @default(now())
  comments Comments[]
  likes Likes[]
  threads Threads[]
}

model Post{
  id String @id @default(uuid())
  title String
  content String
  image String?
  type String
  createdAt DateTime @default(now())
  comments Comments[]
  likes Likes[]
}
model Likes{
  id String @id @default(uuid())
  userId String
  postId String
  user Users @relation(fields:[userId],references:[id],onDelete:Cascade)
  post Post @relation(fields:[postId],references:[id],onDelete:Cascade)
  @@unique([userId,postId])
}
model Chapter{
  id String @id @default(uuid())
  name String
  parentId String?
  parent Chapter? @relation("ChapterTrees",fields:[parentId],references:[id])
  children Chapter[] @relation("ChapterTrees")
  bookId String
  book Books @relation(fields:[bookId],references:[id])
  order Int
  matns Matn[]
}
model Books{
  id String @id @default(uuid())
  title String
  author String
  coverUrl String?
  description String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  matn Matn[]   
  chapters Chapter[]
}
model Matn{
  id String @id @default(uuid())
  bookId String
  book Books @relation(fields:[bookId],references:[id],onDelete:Cascade)
  order Int
  matnText String
  sharh Sharh[]
  chapterId String
  chapter Chapter @relation(fields:[chapterId],references:[id])
}
model Sharh{
  id String @id @default(uuid())
  matnId String
  matn Matn @relation(fields:[matnId],references:[id],onDelete:Cascade)
  scholar String
  sharhText String
  footnotes Footnote[]
}
model Footnote{
  id String @id @default(uuid())
  sharhId String
  sharh Sharh @relation(fields:[sharhId],references:[id],onDelete:Cascade)
  footnoteText String?
}